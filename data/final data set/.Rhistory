print(sightsRanked)
#plot
points <- eventReactive(input$recalc, {
sightsRanked[,1:2]
}, ignoreNULL = FALSE)
output$distPlot <- renderText({
points
})
})
})
shinyApp(ui = ui, server = server)
library(shiny)
ui<-shinyUI(fluidPage(
# Application title
titlePanel("Hello Shiny!"),
# Sidebar with a slider input for the number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30),
textInput(inputId = "location",label = "Where you are"),
actionButton(inputId="go",label = "go")
),
# Show a plot of the generated distribution
mainPanel(
textOutput("distPlot")
)
)
))
# Define server logic required to draw a histogram
server <- shinyServer(function(input, output) {
# Expression that generates a histogram. The expression is
# wrapped in a call to renderPlot to indicate that:
#
#  1) It is "reactive" and therefore should re-execute automatically
#     when inputs change
#  2) Its output type is a plot
#address <- "155 Claremont Ave, New York"
address <- isolate(input$location)
#geocode <- geocode(address())
geocode = 1
observeEvent(input$go,{
address <-isolate(input$location)
if (address == ""){
address <- "155 Claremont Ave, New York"
}
geocode <- geocode(address)
print(geocode)
start_lat<-as.numeric(geocode$lat)
start_lng<-as.numeric(geocode$lon)
startpoint <- c(start_lat,start_lng,"startpoint","","")
mustGo<-read.csv("Must-Go-Sights.csv")
randomSights <- read.csv("Must-Go-Sights.csv")#take out the mustGoSights
numberOfPlaces <- 5
neighbor <- "b"
mustGo$neighbor <- c("a","b","a","a") #need to delete
randomSights<-mustGo #need to delete
#randomSights$NAME<-c("abc")#need to delete
#select in neighborhood
mustGoSelected <- mustGo[mustGo$neighbor == neighbor,]
#sampling
if(nrow(mustGoSelected) >= numberOfPlaces){
mustGoSelected<-mustGoSelected[sample(1:nrow(mustGoSelected),
numberOfPlaces,replace=FALSE),]
}else{
n<-numberOfPlaces-nrow(mustGoSelected)
extra <- randomSights[sample(1:nrow(randomSights),n,replace=FALSE),]
mustGoSelected <- rbind(mustGoSelected,extra)
}
#add start-end point
mustGoSelected <- rbind(startpoint,mustGoSelected)
#distance
distance <- dist(mustGoSelected[,1:2]) #approximation
#tsp
tsp <- TSP(distance)
tour <- solve_TSP(tsp, method = "farthest_insertion")
path <- c(1,as.vector(cut_tour(tour, 1)))
sightsRanked<-mustGoSelected[path,]
sightsRanked <- rbind(sightsRanked,sightsRanked[1,])
sightsRanked[,1]<-as.numeric(sightsRanked[,1])
sightsRanked[,2]<-as.numeric(sightsRanked[,2])
print(sightsRanked)
#plot
points <- eventReactive(input$recalc, {
sightsRanked[,1:2]
}, ignoreNULL = FALSE)
output$distPlot <- renderText({
points()
})
})
})
shinyApp(ui = ui, server = server)
library(shiny)
ui<-shinyUI(fluidPage(
# Application title
titlePanel("Hello Shiny!"),
# Sidebar with a slider input for the number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30),
textInput(inputId = "location",label = "Where you are"),
actionButton(inputId="go",label = "go")
),
# Show a plot of the generated distribution
mainPanel(
textOutput("distPlot")
)
)
))
# Define server logic required to draw a histogram
server <- shinyServer(function(input, output) {
# Expression that generates a histogram. The expression is
# wrapped in a call to renderPlot to indicate that:
#
#  1) It is "reactive" and therefore should re-execute automatically
#     when inputs change
#  2) Its output type is a plot
#address <- "155 Claremont Ave, New York"
address <- isolate(input$location)
#geocode <- geocode(address())
geocode = 1
observeEvent(input$go,{
address <-isolate(input$location)
if (address == ""){
address <- "155 Claremont Ave, New York"
}
geocode <- geocode(address)
print(geocode)
start_lat<-as.numeric(geocode$lat)
start_lng<-as.numeric(geocode$lon)
startpoint <- c(start_lat,start_lng,"startpoint","","")
mustGo<-read.csv("Must-Go-Sights.csv")
randomSights <- read.csv("Must-Go-Sights.csv")#take out the mustGoSights
numberOfPlaces <- 5
neighbor <- "b"
mustGo$neighbor <- c("a","b","a","a") #need to delete
randomSights<-mustGo #need to delete
#randomSights$NAME<-c("abc")#need to delete
#select in neighborhood
mustGoSelected <- mustGo[mustGo$neighbor == neighbor,]
#sampling
if(nrow(mustGoSelected) >= numberOfPlaces){
mustGoSelected<-mustGoSelected[sample(1:nrow(mustGoSelected),
numberOfPlaces,replace=FALSE),]
}else{
n<-numberOfPlaces-nrow(mustGoSelected)
extra <- randomSights[sample(1:nrow(randomSights),n,replace=FALSE),]
mustGoSelected <- rbind(mustGoSelected,extra)
}
#add start-end point
mustGoSelected <- rbind(startpoint,mustGoSelected)
#distance
distance <- dist(mustGoSelected[,1:2]) #approximation
#tsp
tsp <- TSP(distance)
tour <- solve_TSP(tsp, method = "farthest_insertion")
path <- c(1,as.vector(cut_tour(tour, 1)))
sightsRanked<-mustGoSelected[path,]
sightsRanked <- rbind(sightsRanked,sightsRanked[1,])
sightsRanked[,1]<-as.numeric(sightsRanked[,1])
sightsRanked[,2]<-as.numeric(sightsRanked[,2])
print(sightsRanked)
#plot
points <- eventReactive(input$recalc, {
sightsRanked[,1:2]
}, ignoreNULL = FALSE)
output$distPlot <- renderText({
print(sightsRanded[,1:2])
points()
})
})
})
shinyApp(ui = ui, server = server)
library(shiny)
ui<-shinyUI(fluidPage(
# Application title
titlePanel("Hello Shiny!"),
# Sidebar with a slider input for the number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30),
textInput(inputId = "location",label = "Where you are"),
actionButton(inputId="go",label = "go")
),
# Show a plot of the generated distribution
mainPanel(
textOutput("distPlot")
)
)
))
# Define server logic required to draw a histogram
server <- shinyServer(function(input, output) {
# Expression that generates a histogram. The expression is
# wrapped in a call to renderPlot to indicate that:
#
#  1) It is "reactive" and therefore should re-execute automatically
#     when inputs change
#  2) Its output type is a plot
#address <- "155 Claremont Ave, New York"
address <- isolate(input$location)
#geocode <- geocode(address())
geocode = 1
observeEvent(input$go,{
a<-isolate(input$location)
points <- eventReactive(input$recalc, {
a
}, ignoreNULL = FALSE)
output$distPlot <- renderText({
print(sightsRanded[,1:2])
points()
})
})
})
shinyApp(ui = ui, server = server)
library(shiny)
ui<-shinyUI(fluidPage(
# Application title
titlePanel("Hello Shiny!"),
# Sidebar with a slider input for the number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30),
textInput(inputId = "location",label = "Where you are"),
actionButton(inputId="go",label = "go")
),
# Show a plot of the generated distribution
mainPanel(
textOutput("distPlot")
)
)
))
# Define server logic required to draw a histogram
server <- shinyServer(function(input, output) {
# Expression that generates a histogram. The expression is
# wrapped in a call to renderPlot to indicate that:
#
#  1) It is "reactive" and therefore should re-execute automatically
#     when inputs change
#  2) Its output type is a plot
#address <- "155 Claremont Ave, New York"
address <- isolate(input$location)
#geocode <- geocode(address())
geocode = 1
observeEvent(input$go,{
a<-isolate(input$location)
points <- eventReactive(input$recalc, {
a
}, ignoreNULL = FALSE)
output$distPlot <- renderText({
print("odp")
points()
})
})
})
shinyApp(ui = ui, server = server)
library(shiny)
ui<-shinyUI(fluidPage(
# Application title
titlePanel("Hello Shiny!"),
# Sidebar with a slider input for the number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30),
textInput(inputId = "location",label = "Where you are"),
actionButton(inputId="go",label = "go")
),
# Show a plot of the generated distribution
mainPanel(
textOutput("distPlot")
)
)
))
# Define server logic required to draw a histogram
server <- shinyServer(function(input, output) {
# Expression that generates a histogram. The expression is
# wrapped in a call to renderPlot to indicate that:
#
#  1) It is "reactive" and therefore should re-execute automatically
#     when inputs change
#  2) Its output type is a plot
#address <- "155 Claremont Ave, New York"
address <- isolate(input$location)
#geocode <- geocode(address())
geocode = 1
observeEvent(input$go,{
a<-isolate(input$location)
points <- eventReactive(input$recalc, {
a <- "abcde"
b <- "baaf"
a<-b
a
}, ignoreNULL = FALSE)
output$distPlot <- renderText({
print("odp")
points()
})
})
})
shinyApp(ui = ui, server = server)
library(shiny)
ui<-shinyUI(fluidPage(
# Application title
titlePanel("Hello Shiny!"),
# Sidebar with a slider input for the number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30),
textInput(inputId = "location",label = "Where you are"),
actionButton(inputId="go",label = "go")
),
# Show a plot of the generated distribution
mainPanel(
textOutput("distPlot")
)
)
))
# Define server logic required to draw a histogram
server <- shinyServer(function(input, output) {
# Expression that generates a histogram. The expression is
# wrapped in a call to renderPlot to indicate that:
#
#  1) It is "reactive" and therefore should re-execute automatically
#     when inputs change
#  2) Its output type is a plot
#address <- "155 Claremont Ave, New York"
address <- isolate(input$location)
#geocode <- geocode(address())
geocode = 1
observeEvent(input$go,{
a<-isolate(input$location)
points <- eventReactive(input$recalc, {
a <- "abcde"
b <- "baaf"
b
}, ignoreNULL = FALSE)
output$distPlot <- renderText({
print("odp")
points()
})
})
})
shinyApp(ui = ui, server = server)
library(shiny)
ui<-shinyUI(fluidPage(
# Application title
titlePanel("Hello Shiny!"),
# Sidebar with a slider input for the number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30),
textInput(inputId = "location",label = "Where you are"),
actionButton(inputId="go",label = "go")
),
# Show a plot of the generated distribution
mainPanel(
textOutput("distPlot")
)
)
))
# Define server logic required to draw a histogram
server <- shinyServer(function(input, output) {
# Expression that generates a histogram. The expression is
# wrapped in a call to renderPlot to indicate that:
#
#  1) It is "reactive" and therefore should re-execute automatically
#     when inputs change
#  2) Its output type is a plot
#address <- "155 Claremont Ave, New York"
address <- isolate(input$location)
#geocode <- geocode(address())
geocode = 1
observeEvent(input$go,{
a<-isolate(input$location)
points <- eventReactive(input$recalc, {
a
b <- "baaf"
b
}, ignoreNULL = FALSE)
output$distPlot <- renderText({
print("odp")
points()
})
})
})
shinyApp(ui = ui, server = server)
library(shiny)
ui<-shinyUI(fluidPage(
# Application title
titlePanel("Hello Shiny!"),
# Sidebar with a slider input for the number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30),
textInput(inputId = "location",label = "Where you are"),
actionButton(inputId="go",label = "go")
),
# Show a plot of the generated distribution
mainPanel(
textOutput("distPlot")
)
)
))
# Define server logic required to draw a histogram
server <- shinyServer(function(input, output) {
# Expression that generates a histogram. The expression is
# wrapped in a call to renderPlot to indicate that:
#
#  1) It is "reactive" and therefore should re-execute automatically
#     when inputs change
#  2) Its output type is a plot
#address <- "155 Claremont Ave, New York"
address <- isolate(input$location)
#geocode <- geocode(address())
geocode = 1
observeEvent(input$go,{
a<-isolate(input$location)
points <- eventReactive(input$recalc, {
a
b <- "baaf"
}, ignoreNULL = FALSE)
output$distPlot <- renderText({
print("odp")
points()
})
})
})
shinyApp(ui = ui, server = server)
library(shiny)
ui<-shinyUI(fluidPage(
# Application title
titlePanel("Hello Shiny!"),
# Sidebar with a slider input for the number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30),
textInput(inputId = "location",label = "Where you are"),
actionButton(inputId="go",label = "go")
),
# Show a plot of the generated distribution
mainPanel(
textOutput("distPlot")
)
)
))
# Define server logic required to draw a histogram
server <- shinyServer(function(input, output) {
# Expression that generates a histogram. The expression is
# wrapped in a call to renderPlot to indicate that:
#
#  1) It is "reactive" and therefore should re-execute automatically
#     when inputs change
#  2) Its output type is a plot
#address <- "155 Claremont Ave, New York"
address <- isolate(input$location)
#geocode <- geocode(address())
geocode = 1
observeEvent(input$go,{
a<-isolate(input$location)
points <- eventReactive(input$recalc, {
a
b <- "baaf"
a
}, ignoreNULL = FALSE)
output$distPlot <- renderText({
print("odp")
points()
})
})
})
shinyApp(ui = ui, server = server)
shiny::runApp('~/Desktop/project2-group1/lib/App template')
remove(list=ls(0))
remove(list=ls())
shiny::runApp('~/Desktop/project2-group1/lib/App template')
shiny::runApp('~/Desktop/project2-group1/lib/App template')
shiny::runApp('~/Desktop/project2-group1/lib/App template')
shiny::runApp('~/Desktop/project2-group1/lib/App template')
